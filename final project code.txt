


//put your bitmoji code up here or next to mine since they are giant code blocks


var drawHead = function(x,y,nickHeight){
    noStroke();
    fill(232, 225, 144);//skin color
    ellipse(x+92*(nickHeight/100),y+17*(nickHeight/100),65*(nickHeight/100),60*(nickHeight       /100));//head
    
    fill(255, 252, 252);//eyeball white
    ellipse(x+80*(nickHeight/100),y+13*(nickHeight/100),15*(nickHeight/100),15*(nickHeight       /100));//left eye
    ellipse(x+103*(nickHeight/100),y+13*(nickHeight/100),15*(nickHeight/100),15*(nickHeight      /100));//right eye
    
    fill(66, 173, 137);//eye color
    ellipse(x+80*(nickHeight/100),y+13*(nickHeight/100),7*(nickHeight/100),7*(nickHeight/100     ));//left eye pupil
    ellipse(x+103*(nickHeight/100),y+13*(nickHeight/100),7*(nickHeight/100),7*(nickHeight/100     ));//right eye pupil
    
    fill(99, 105, 19);//hair color
    arc(x+90*(nickHeight/100),y+3*(nickHeight/100),76*(nickHeight/100),54*(nickHeight/100        ),170,360);//hair
    
    strokeWeight((nickHeight/100*2));
    stroke(5, 4, 4);//mouth line color
    line(x+80*(nickHeight/100),y+35*(nickHeight/100),x+104*(nickHeight/100),y+35*(nickHeight     /100));//mouth
    
    strokeWeight(1);
    stroke(5, 4, 4);
    fill(232, 225, 144);//skin color
    bezier(x+91*(nickHeight/100),y+15*(nickHeight/100),x+92*(nickHeight/100),y+18*(nickHeight     /100),x+70*(nickHeight/100),y+35*(nickHeight/100),x+95*(nickHeight/100),y+29*(nickHeight     /100));//noze
    
    noStroke();
    fill(99, 105, 19);//hair color
    arc(x+(nickHeight/100*92),y+(nickHeight/100*40),(nickHeight/100*38),22*(nickHeight/100       ),-11,197);//beard

};

var drawBody =function (x,y,nickHeight){
  noStroke();
  
    fill(21, 99, 57);//shirt color
    rect(x+56*nickHeight/100,y+43*nickHeight/100,70*nickHeight/100,100*nickHeight/100,10         *nickHeight/100);//shirt
    rect(x+26*nickHeight/100,y+44*nickHeight/100,30*nickHeight/100,45*nickHeight/100,10          *nickHeight/100);//left sleeve
    rect(x+125*nickHeight/100,y+44*nickHeight/100,30*nickHeight/100,45*nickHeight/100,10         *nickHeight/100);//right sleeve

    fill(232, 225, 144);//skin color
    rect(x+69*(nickHeight/100),y+26*(nickHeight/100),45*(nickHeight/100),23*(nickHeight/100      ),10*(nickHeight/100));//neck
    quad(x+68*(nickHeight/100),y+45*(nickHeight/100),x+61*(nickHeight/100),y+46*(nickHeight      /100),x+115*(nickHeight/100),y+44*(nickHeight/100),x+92*(nickHeight/100),y+66*(nickHeight/100));//collar
  
    fill(21, 99, 57);//shirt color
    rect(x+56*nickHeight/100,y+43*nickHeight/100,70*nickHeight/100,100*nickHeight/100,10        *nickHeight/100);//shirt
    rect(x+26*nickHeight/100,y+44*nickHeight/100,30*nickHeight/100,45*nickHeight/100,10        *nickHeight/100);//left sleeve
    rect(x+125*nickHeight/100,y+44*nickHeight/100,30*nickHeight/100,45*nickHeight/100,10        *nickHeight/100);//right sleeve
    
    fill(232, 225, 144);//skin color
    rect(x+69*(nickHeight/100),y+26*(nickHeight/100),45*(nickHeight/100),23*(nickHeight/100     ),10*(nickHeight/100));//neck
    quad(x+68*(nickHeight/100),y+45*(nickHeight/100),x+61*(nickHeight/100),y+46*(nickHeight     /100),x+115*(nickHeight/100),y+44*(nickHeight/100),x+92*(nickHeight/100),y+66*(nickHeight/100));//collar
    
    noStroke();
    fill(232, 225, 144);//skin color
    rect(x+29*(nickHeight/100),y+78*(nickHeight/100),23*(nickHeight/100),70*(nickHeight/100     ),10*(nickHeight/100));//left arm
    rect(x+129*(nickHeight/100),y+78*(nickHeight/100),23*(nickHeight/100),70*(nickHeight/100     ),10*(nickHeight/100));//right arm
    
    strokeWeight((nickHeight/100*4));
    stroke(196, 196, 196);
    fill(212, 205, 205);
    line(x+65*(nickHeight/100),y+76*(nickHeight/100),x+65*(nickHeight/100),y+111*(nickHeight     /100));//n left line
    line(x+65*(nickHeight/100),y+76*(nickHeight/100),x+80*(nickHeight/100),y+111*(nickHeight     /100));//n cross line
    line(x+80*(nickHeight/100),y+76*(nickHeight/100),x+80*(nickHeight/100),y+111*(nickHeight     /100));//n right line
    line(x+96*(nickHeight/100),y+76*(nickHeight/100),x+96*(nickHeight/100),y+111*(nickHeight     /100));//k line
    line(x+96*(nickHeight/100),y+91*(nickHeight/100),x+109*(nickHeight/100),y+111*(nickHeight/100));//k line down
    line(x+97*(nickHeight/100),y+91*(nickHeight/100),x+109*(nickHeight/100),y+79*(nickHeight     /100));//k line up

};
var head =function(x,y,s){
    noStroke();
    fill(255, 224, 189);
    ellipse(x+105*s,y+119*s,s*92,s*100); //head 
    arc(x+104*s,y+159*s,s*82,s*105,29,143);//neck
};

var hat=function(x,y,s)
{
    fill(41, 35, 35);
    arc(x+107*s,y+91*s,s*80,s*53,-186,0);//top of hat
    fill(41, 35, 35);
    ellipse(x+126*s,y+90*s,119*s,11*s);//cap
};
var sunglasses= function(x,y,s)
{
    fill(10, 9, 9);
    stroke(0,0,0);
    ellipse(x+89*s,y+119*s,s*19,s*14);//glasses left
    ellipse(x+117*s,y+119*s,s*19,s*14);//glasses right
    line(x+82*s,y+119*s,x+121*s,y+116*s);//glasses nose bridge
    line(x+59*s,y+123*s,x+92*s,y+118*s);//glasses side left
    line(x+124*s,y+119*s,x+150*s,y+120*s);//glasses side right
};

var face = function(x,y,s)
{
    fill(255, 224, 189);
    bezier(x+104*s,y+119*s,x+129*s,y+129*s,x+104*s,y+149*s,x+99*s,y+124*s);
    //nose
    fill(10, 9, 9);
    arc(x+106*s,y+160*s,s*52,s*11,s*1,176);//beard
    line(x+98*s,y+142*s,x+115*s,y+142*s);//mustache
};
var mouth=function(x,y,s)
{
    fill(255, 255, 255);//white for teeth
    arc(x+107*s,y+147*s,s*22,s*-18,-181,1);//mouth
    line(x+95*s,y+147*s,x+119*s,y+147*s);//top of mouth
};

var body=function(x,y,s)
{ 
    fill(58, 105, 199);
    quad(x+185*s,y+242*s,x+36*s,y+242*s,x+78*s,y+185*s,x+142*s,y+184*s);//shirt
    fill(255, 255, 255);
    textSize(17);
    text("JM",x+69*s,y+189*s);
};


var drawjordan=function(x,y,s)
{
    s=s/100;
    head(x,y,s);
    hat(x,y,s);
    sunglasses(x,y,s);
    mouth(x,y,s);
    body(x,y,s);
    face(x,y,s);
    
};


var drawNick =function (x , y ,nickHeight) {
    drawBody(x,y,nickHeight);
    drawHead(x ,y,nickHeight);
};
//Space Ship
var falconX = 46;
var MillenniumFalcon = function(config) {
    this.x = config.x || 150;
    this.y = config.y || 150;
    this.asteroids = 0;
};
MillenniumFalcon.prototype.collision=function(object){
     if ((object.x >= this.x && object.x <= (this.x + 40)) &&
        (object.y >= this.y && object.y <= (this.y + 90))) 
        {
        object.y = -400;
        this.asteroids--;
        }


};
MillenniumFalcon.prototype.draw = function() {
    pushMatrix();
    translate(this.x, this.y);
    var fillColor = 255;
    strokeWeight(1);
    rectMode(CORNER);
    fill(230, 230, 230);
    stroke(0, 0, 0);
    quad(falconX - 38, 40, falconX -92, 45, falconX - 100, 46, falconX - 94, 20);//left atenna
    quad(falconX - 73, 65, falconX -39, 45,falconX - 100, 46, falconX - 94, 23);
    rotate(89); //right attena
    ellipse(falconX-8,13,2,2);
    //dot on attena
    ellipse(falconX+4,13,2,2);
    //dot on attena
   
    fill(230, 230, 230);
    stroke(168, 168, 168);
    ellipse(falconX, 50, 62.5, 62.5);//main body
    stroke(0, 0, 0);
    rect(falconX - 6.25, 17.5, 12.5, 26.25);//freight loading room
    
    
    ellipse(falconX - 15, 35, 5, 5);//satelite dish
    
    strokeWeight(1);
    rectMode(CORNER);
    stroke(0, 0, 0);
    fill(186, 186, 186);
   
    fill(230, 230, 230);
    stroke(0, 0, 0);
    fill(0, 255, 255);
    arc(falconX, 50, 70, 65, 30, 150);
    fill(230, 230, 230);
    arc(falconX, 50, 68.75, 62.25, 30, 150);//hyperdrive 
    ellipse(falconX, 50, 12.5, 12.5);//center circle
    fill(0, 0, 0);
    ellipse(falconX, 48, 6.25, 6.25);//quad laser cannon area
    stroke(240, 231, 240);
    line(falconX, 51, falconX, 38.25);
    line(falconX - 3.25, 48, falconX + 3.25, 48);
    line(falconX - 2.25, 50.25, falconX + 2.5, 45.75);
    line(falconX - 2.25, 45.25, falconX + 2.25, 50.25);
    stroke(163, 163, 163);
    fill(163, 163, 163);
    rect(falconX - 1.25, 43.75, 2.5, 3.75);
    stroke(0, 0, 0);
    rect(falconX - 0.625, 41.25, 0.625, 5);
    
    noStroke();
    fill(0, 0, 0);
    quad(falconX + 25, 53.75, falconX + 36.25, 57.5, falconX + 36.25, 42.5, falconX + 25, 46.25);//space cut out from the side of the main body
    quad(falconX - 23.75, 53.75, falconX - 35, 57.5, falconX - 35, 42.5, falconX - 23.75, 46.25);//space cut out from the side of the main body
    stroke(0, 0, 0);
    fill(0, 0, 0);
    line(falconX - 30, 65.5, falconX - 5.5, 53.25);
    line(falconX + 30, 65, falconX + 5.25, 53);
    
    fill(214, 211, 211);
    rect(falconX + 26.25, 25, 8.75, 10);//cockpit
    stroke(255, 255, 255);
    fill(0, 68, 255);
    quad(falconX + 35, 25.25, falconX + 32.5, 20, falconX + 28.75, 20, falconX + 26.25, 25.25);
    fill(255, 255, 255);
    line(falconX + 28.75, 20, falconX + 28.75, 23.75);
    line(falconX + 32.5, 20, falconX + 32.25, 23.75);
    quad(falconX + 35, 25, falconX + 33.75, 23.75, falconX + 27.5, 23.75, falconX + 26.25, 25);
    stroke(0, 0, 0);
    fill(214, 211, 211);
    quad(falconX + 26.25, 31.25, falconX + 35.25, 35, falconX + 19.6, 43.25, falconX + 12.5, 38.5);//cockpit access corridor
    quad(falconX + 25, 46.25, falconX + 25, 53.75, falconX + 31.25, 52.5, falconX + 31.25, 47.5);//starboard docking ring
    quad(falconX - 23.75, 46.25, falconX - 23.75, 53.75, falconX - 31.25, 52.5, falconX - 31.25, 47.5);//port docking ring
    rect(falconX + 10, 48.125, 15, 3.75);
    fill(135, 135, 135);
    triangle(falconX + 25, 46.25, falconX + 25, 48.25, falconX + 10.25, 48.75);
    triangle(falconX + 25, 54.25, falconX + 10.25, 52, falconX + 25.25, 52);
    fill(135, 135, 135);
    triangle(falconX - 23.75, 46.25, falconX - 8.5, 48.5, falconX - 23.75, 48.75);
    triangle(falconX - 23.75, 54.25, falconX - 8.5, 52, falconX - 23.75, 48.75);
    fill(214, 211, 211);
    rect(falconX - 24, 48.125, 15, 3.75);
    line(falconX + 25, 53.75, falconX + 31.25, 56.25);
    line(falconX + 25, 46.25, falconX + 31.25, 43.75);
    stroke(186, 186, 186);
    fill(0, 0, 0);
    ellipse(falconX - 11.25, 66.25, 5, 5);
    ellipse(falconX + 11.25, 66.25, 5, 5);
    ellipse(falconX + 6.25, 58.75, 5, 5);
    ellipse(falconX - 6.25, 58.75, 5, 5);
    ellipse(falconX, 61.25, 5, 5);
    ellipse(falconX, 68.75, 5, 5);
    popMatrix();
};







//button function stuff
var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
};

Button.prototype.draw = function() {
    fill(171, 171, 171);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(0, 0, 0);
    textSize(19);
    textAlign(LEFT, TOP);
    text(this.label, this.x+10, this.y+this.height/4);
};

Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};

var scene = 0;
var gameOver = false;
//this is the start game/unpause level 1 button, need to figure out pauses for levels 2 n 3, prob just gonna add a button to their cutscenes n call it a day
var btn1 = new Button({
    x: 116,
    y: 303,
    label: "START",
    onClick: function() {
        gameOver = false;
        if(scene === 0){
        scene = 1;
        }
    }
});

var MillenniumFalcon = new MillenniumFalcon({x:96,y:275});

//this is the level pause button, its in the top right corner
var btn2 = new Button({
    x: 275,
    y: 0,
    label: "PAUSE",
    onClick: function() {
       if(scene === 1){
        scene = 0;
    }
    }
});
var btn6 = new Button({
    x: 275,
    y: 0,
    label: "PAUSE",
    onClick: function() {
       if(scene === 2){
        scene = 1.5;
    }
    }
});

var btn7 = new Button({
    x: 275,
    y: 0,
    label: "PAUSE",
    onClick: function() {
       if(scene === 3){
        scene = 2.5;
    }
    }
});

//cutscene 1 button/level 2 pause screen
var btn3 = new Button({
    x: 179,
    y: 228,
    label: "START",
    onClick: function() {
        if(scene === 1.5){
        scene = 2;
        }
    }
});
var btn4 = new Button({
    x: 179,
    y: 228,
    label: "START",
    onClick: function() {
        if(scene === 2.5){
        scene = 3;
        }
    }
});
var btn5 = new Button({
    x: 179,
    y: 228,
    label: "RESTART",
    onClick: function() {
        if(scene === 3.5){
        scene = 0;
        }
    }
});
var btn8 = new Button({
    x: 179,
    y: 228,
    label: "RESTART",
    onClick: function() {
        if(scene === -1)
        {
        MillenniumFalcon.asteroids = 0;
        scene = 0;
        }
    }
});


//add any future created button in here, they wont work other wise and code will wig out
mouseClicked = function() {
    btn1.handleMouseClick();
    btn2.handleMouseClick();
    btn3.handleMouseClick();
    btn4.handleMouseClick();
    btn5.handleMouseClick();
    btn6.handleMouseClick();
    btn7.handleMouseClick();
    btn8.handleMouseClick();
};
//end of the button function stuff


//
//gonna put all the stationary scenes like title n cutscenes in this section
//

// NK 12/16/2022 - making a star system for use in all static backgrounds
var drawStars = function (x,y) {
fill(249, 250, 203);
ellipse (x,y,15,15);
};
var starX = [random(50,350)]; 
var starY = [random(50,350)]; 
    for (var z = 0 ; z <=30 ; z++) {
        starX.push (random(20,380)); 
        starY.push (random(20,380)); 
    }
// NK 12/16/2022 - use this to actually have the stars be drawn in scene   
/*
for (var z = 0 ; z <= 30 ; z++) {
        drawStars(starX[z],starY[z],15,15);
    }
*/
    

//splash/title screen
var Splash = function (){
background(0, 0, 0);

fill(247, 247, 247);

    for (var z = 0 ; z <= 30 ; z++) {
        drawStars(starX[z],starY[z],15,15);
    }
MillenniumFalcon.draw();
drawNick(100,219,40);
drawjordan(158,179,40);
btn1.draw();
fill(250, 138, 68);
ellipse(304,100,100,100);
fill(255, 92, 92);
ellipse(323,115,35,24);
fill(150, 150, 150);
ellipse(223,133,40,40);
textSize(30);
fill(255, 251, 0);
text("The Kestrel Run",76,24,244,100);
textSize(15);
text("Authors:Nick & Jordan",9,377,262,100);
};

//post level 1 cutscene (work in progress needs proper graphics)
var Cut1 = function () {
   background(135, 135, 135);
   MillenniumFalcon.draw();
   stroke(0, 0, 0);
   strokeWeight(4);
   fill(255, 255, 255);
   rect(84,95,164,111,6);
   fill(0, 0, 0);
   noStroke ();
   text("Good work commander but theres more on the way",100,100,160,200);
   btn3.draw();
};

var Cut2 = function () {
   background(99, 99, 99); 
   //MillenniumFalcon(100,219,40);
   stroke(0, 0, 0);
   strokeWeight(4);
   fill(255, 255, 255);
   rect(84,95,184,111,6);
   fill(0, 0, 0);
   noStroke ();
   text("Your nearly out of it, just a little more",100,100,160,200);
   btn4.draw();
};
//
//end of the static scenes
//

var Player = function(x, y,nickHeight) {
    this.x = x;
    this.y = y;
    this.nickHeight = nickHeight || 30;
    //this.img = getImage("creatures/Hopper-Happy");
    this.asteroids = 0;
};

Player.prototype.draw = function() {
    this.y = constrain(this.y, 65, height-50); 
    this.x = 30;
    rectMode(CORNER);
    MillenniumFalcon (this.x , this.y , this.nickHeight);
   
    //image(this.img, this.x, this.y, 40, 40);
};

//this controls up for the player
Player.prototype.hop = function() {
    //this.img = getImage("creatures/Hopper-Jumping");
    this.y -= 4;
};

//this controls down for the player
Player.prototype.fall = function() {
    //this.img = getImage("creatures/Hopper-Happy");
    this.y += 4;
};

//asteroid collision detection prototype (ignore that it says sticks)
Player.prototype.checkForStickGrab = function(stick) {
    if ((stick.x >= this.x && stick.x <= (this.x + 40)) &&
        (stick.y >= this.y && stick.y <= (this.y + 40))) {
        stick.y = -400;
        this.asteroids--;
    }
};


//asteroid constructor
var Asteroid = function(x, y) {
    this.x = x;
    this.y = y;
};

//asteroid drawing prototype
Asteroid.prototype.draw = function() {

    fill(100, 92, 83);
    ellipse(this.x,this.y,45,45);
    fill(199, 120, 68);
    stroke(10, 9, 9);
    ellipse(this.x+8,this.y-13,14,15);
    ellipse(this.x+11,this.y+10,14,13);
    ellipse(this.x-10,this.y+4,15,15);
    
    
};

//making a player object with constructor
var player = new Player(196, 301);


//variable to change asteroid count for difficulty and level length
var asteroidNumber = 50;
// NK 12/16/2022 - added a density option to change the spawn interval between each asteroid
var asteroidDensity = 60;

//this assigns the asteroid(enemy) array its values, this makes the randomness for the draw function
var Asteroids = [];
for (var i = 0; i <= asteroidNumber; i++) {  
    Asteroids.push(new Asteroid(i * asteroidDensity + 300, random(80, 400)));
}
// NK 12/16/2022 - making a second asteroid array for test purposes to troubleshoot density clumping error

var Asteroids2 = [];
for (var i = 0; i <= asteroidNumber; i++) {  
    Asteroids2.push(new Asteroid(i * asteroidDensity + 300, random(80, 400)));
}
// NK 12/16/2022 - new array works, so for each level a new array is needed and must set array "Asteroids" equal tothat levels array so for level 3 set it equal to "Asteroids3"  
var Asteroids3 = [];
for (var i = 0; i <= asteroidNumber; i++) {  
    Asteroids3.push(new Asteroid(i * asteroidDensity + 300, random(80, 400)));
}


var speedMultiplier = 1.5;
// NK 12/16/2022 - this multiplies the levels speed, so it multiplies the assigned scene number to determine the enemy speed, so this is the speed scale for the whole game




//JM 12-7-22 - generalized level function to reduce code complexity
var Level = function (levelNumber) {


    
    // static
    background(0, 0, 0);
    for (var z = 0 ; z <= 30 ; z++) {
        drawStars(starX[z],starY[z],15,15);
    }
    fill(79, 217, 255);
    ellipse(287,146,100,100);
    fill(104, 107, 106);
    rectMode(CORNER);
    fill(104, 107, 106);
    rect(-28,-10,600,91);
    btn2.draw();
   
   
   
        //this tracks if the game should still allow movement, and is outside the loop
   
    //this controls asteroid speed and the life system
    for (var i = 0; i < Asteroids.length; i++) {
        Asteroids[i].draw();
        MillenniumFalcon.collision(Asteroids[i]);
        //JM 12-7-22 - tying asteroid speed to the level playing 
        Asteroids[i].x -= levelNumber * speedMultiplier;
        // changed scene function increment to reduce scene reduncancy names
        if (Asteroids[(asteroidNumber - 1)].x <= -60) {
            scene += 0.5;
            for (var i = 0; i < Asteroids.length; i++) {
                Asteroids[i].x = i * asteroidDensity + 300;
            }
        }
        
        
        //this ends the level if the player loses all health
        //resets the game back to splash
         if ( MillenniumFalcon.asteroids <= -9) {
        textSize(25);
        text("GAME OVER", 124, 124);
        gameOver = true;
        scene = -1;
         }
    }
    
    textSize(23); // this displays the level and your health
    rect(0,0,111,82,8);
    fill(255, 0, 0);
    text("Lives " + (9 + MillenniumFalcon.asteroids), 15, 15); 
    fill(31, 31, 31);
    text("Level " + scene, 15, 35);
    
     //text("cross: " + cross, 20, 73);
     //diagnostic
     
    
   
    
    //this controls movement 
    if ( gameOver === false && keyIsPressed && key.code === 32 ) 
    {
        if (MillenniumFalcon.y<69){//nice
            MillenniumFalcon.y +=0;
        }
        else{
            
        MillenniumFalcon.y -= 4;
        }
    } 
    else 
    {
        if (MillenniumFalcon.y>300)
        {
            MillenniumFalcon.y +=0;
        }else 
        {
            MillenniumFalcon.y +=4;
        }
    }
    MillenniumFalcon.draw();
    
};




draw = function() {
    
    
//diagnostic for scene change, comment out whe  not in use
//scene = 2;
//yeehaw
    
    
    //NK 12/16/2022 - Scene changer, aka what makes the game run each scene when prompted by buttons
    if (scene === 1)
    {
      Level(scene);  
     }
     if (scene === 1.5 && MillenniumFalcon.asteroids > -9)
     {
      Cut1(); 
      
     }
      if (scene === 2 && MillenniumFalcon.asteroids > -9)
      {
      Asteroids = Asteroids2;
      Level(scene);
      }
      if (scene===2.5)
      {
          Cut2();
      }
      if (scene===3 && MillenniumFalcon.asteroids > -9){
          
          Asteroids = Asteroids3;
          Level(scene);
      }
      if (scene===3.5)
      {
            background(25, 180, 232);
            textSize(30);
            text("Congragulations You Win!",86,90,278,111);
            textSize(15);
            btn5.draw();
            MillenniumFalcon.asteroids = 0;
      }
      if (scene===-1)
      {
            background(25, 180, 232);
            textSize(30);
            text("Better Luck Next Time!",86,90,278,111);
            textSize(15);
            btn8.draw();
            MillenniumFalcon.asteroids = 0;
      }
    else if (scene === 0) {
        Splash();
    } 
  
};
